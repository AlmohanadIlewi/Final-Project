name: Backend Lambda Deploy S3

on:
  push:
    branches:
      - test-field

jobs:
  # Job: Beispiel-Job (AWS-Konfiguration)
  Beispiel-Job:
    runs-on: ubuntu-latest
    steps:
      - name: Konfiguriere AWS CLI
        run: |
          mkdir -p ~/.aws/
          echo "$super_secret" > ~/.aws/credentials
        env:
          super_secret: ${{ secrets.AWS_CONFIG }}
      
      - name: Zeige AWS-Zugangsdaten
        run: cat ~/.aws/credentials
      
      - name: Liste AWS-Profile
        run: aws configure list-profiles
      
      - name: Liste S3-Buckets
        run: aws s3 ls --region eu-central-1 --profile techstarter
      
  # Job: Lambda-Code-oder-Funktion (Build + Vorbereitung für Deploy)
  Lambda-Code-oder-Funktion:
    runs-on: ubuntu-latest
    needs: Beispiel-Job
    outputs:
      LAMBDA_TF: ${{ steps.list-functions.outputs.LAMBDA_TF }}
    steps:
      - name: Lade neuen Repo-Zustand
        uses: actions/checkout@v4  
      
      - name: Liste Lambda-Funktionen
        working-directory: ${{ github.workspace }}
        id: list-functions
        run: |
          cd ${{ github.workspace }}
          echo "LAMBDA_TF=$(bash ./.github/scripts/lsdirs.sh)" >> $GITHUB_ENV
          echo "LAMBDI.JSON DATEI erstellt:"
          cat lambdi.json

      - name: Überprüfe Existenz von lambdi.json
        run: |
          echo "lambdi.json existiert: $(ls -l lambdi.json)"

      - name: Ergebnis Liste-Funktionen
        run: echo "${{ steps.list-functions.outputs.LAMBDA_TF }}"
      
      - name: Konfiguriere AWS CLI für Deploy
        run: |
          mkdir -p ~/.aws/
          echo "$super_secret" > ~/.aws/credentials
        env:
          super_secret: ${{ secrets.AWS_CONFIG }}

  # Job: Build-und-Zip-Lambdas (Build + Deploy)
  Build-und-Zip-Lambdas:
    needs: Lambda-Code-oder-Funktion
    strategy:
      matrix:
        lambda_function: ${{ fromJson(needs.Lambda-Code-oder-Funktion.outputs.LAMBDA_TF) }}
        
    runs-on: ubuntu-latest
    steps:
      - name: Lade neuen Repo-Zustand
        uses: actions/checkout@v4
      
      - name: Installiere zip
        uses: montudor/action-zip@v1       
      
      - name: Installiere Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Zeige Funktion - ${{ matrix.lambda_function }}
        run: echo "Verpacke Lambda-Funktion ${{ matrix.lambda_function }}"
      
      - name: Cache node-modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/${{ matrix.lambda_function }}
          key: ${{ matrix.lambda_function }}-packages-${{ hashFiles('${{ matrix.lambda_function }}/package-lock.json') }}
      
      - name: Installiere node_modules
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        working-directory: ${{ matrix.lambda_function }}
        continue-on-error: true
        run: |
            npm install
            npm ci
        
      - name: Cache function-zips 
        id: cache-function-zips 
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.lambda_function }}-zip-${{ hashFiles('${{ matrix.lambda_function }}/index.js', '${{ matrix.lambda_function }}/package-lock.json') }}
      
      - name: Zip-Funktionen
        if: steps.cache-function-zips.outputs.cache-hit != 'true'
        run: | 
          zip -q -r ${{ matrix.lambda_function }}.zip ${{ matrix.lambda_function }} node_modules package.json index.js package-lock.json
          echo "Verpackte Funktion ${{ matrix.lambda_function }}"
      
      - name: Zeige Ergebnis
        run: echo "$(ls ${{ matrix.lambda_function }}.zip)"
      
      - name: Deploy Lambda-Funktions-Zips nach S3 und löse Terraform-Deploy aus
        run: echo "Deploye ${{ matrix.lambda_function }}.zip nach S3"
