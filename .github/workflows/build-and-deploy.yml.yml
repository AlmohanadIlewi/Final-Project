# name: Build and Deploy

# on:
#   push:
#     branches:
#       - test-field

# jobs:
#   Lambda-Code:
#     runs-on: ubuntu-latest
#     outputs:
#       LAMBDA_TF: ${{ steps.set-lambda-tf.outputs.LAMBDA_TF }}
#     steps:
#       - name: Lade neuen Repo-Zustand
#         uses: actions/checkout@v4
#       - name: List Lambda Functions
#         id: set-lambda-tf
#         run: |
#           cd ${{ github.workspace }}
#           echo "::set-output name=LAMBDA_TF::$(bash ./.github/scripts/lsdirs.sh)"
#           echo "LAMBDI.JSON FILE Created:"
#           cat lambdi.json

#   Build-and-Zip-Lambdas2:
#     runs-on: ubuntu-latest
#     needs: Lambda-Code
#     steps:
#       - name: Lade neuen Repo-Zustand
#         uses: actions/checkout@v4  
#       - name: Install zip
#         uses: montudor/action-zip@v1       
#       - name: installiere nodeJs
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Display Funktion - ${{ matrix.lambda_function }}
#         run: echo "packing Lambda-Funktion ${{ matrix.lambda_function }}"
#       - name: Cache node-modules
#         id: cache-node-modules
#         uses: actions/cache@v4
#         with:
#           path: ${{ github.workspace }}/${{ matrix.lambda_function }}
#           key: ${{ matrix.lambda_function }}-packages-${{ hashFiles ('${{ matrix.lambda_function }}/package-lock.json') }}
#       - name: install dependince
#         if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
#         working-directory: ${{ github.workspace }}/${{ matrix.lambda_function }}
#         continue-on-error: true
#         run: |
#           cd ${{ github.workspace }}/${{ matrix.lambda_function }}
#           npm install
#           npm ci

#       - name: Zip function
#         run: zip -q -r ${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip ${{ needs.Lambda-Code.outputs.LAMBDA_TF }} node_modules package.json index.js package-lock.json
#       - name: Display result
#         run: echo "$(ls ${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip)"
#       - name: Upload function zip to S3
#         run: aws s3 cp ./${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip s3://tfstate-bucket-abschlussproject/${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip --acl public-read --region eu-central-1 --profile Abschlussprojekt

#       - name: Upload to S3
#         run: |
#           aws s3 sync ./build s3://tfstate-bucket-abschlussproject/ --delete --acl public-read --region eu-central-1
#         env:
#           AWS_CONFIG: ${{ secrets.AWS_CONFIG }}

#   Deploy-Lambdas-and-Trigger-Terraform:
#     runs-on: ubuntu-latest
#     needs: Build-and-Zip-Lambdas2
#     steps:
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 1.1.0

#       - name: Configure AWS CLI
#         run: |
#           mkdir -p ~/.aws/
#           echo "$super_secret" > ~/.aws/credentials
#         env:
#           super_secret: ${{ secrets.AWS_CONFIG }}

#       - name: Deploy Lambda-Function and Trigger Terraform
#         run: |
#           echo "Deploying ${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip to S3"
#           aws s3 cp ${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip s3://tfstate-bucket-abschlussproject/${{ needs.Lambda-Code.outputs.LAMBDA_TF }}.zip --acl public-read --region eu-central-1 --profile techstarter
#           echo "Triggering Terraform deployment..."
#           terraform init
#           terraform validate
#           terraform plan
#           terraform apply -auto-approve
